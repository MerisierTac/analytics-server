# This docker compose file allow to deploy all  mandatory components that are not easy to launch from your IDE of your
# development laptop.

version: "3.5"
services:
  es:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1
    environment:
      - node.name=es
      - discovery.type=single-node
      - cluster.name=elasticsearch
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es:/usr/share/elasticsearch/data/analytics
    ports:
      - 9200:9200
    networks:
      - network_analytics
  kibana:
    image: docker.elastic.co/kibana/kibana:7.12.1
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://es:9200
      ELASTICSEARCH_HOSTS: '["http://es:9200"]'
    networks:
      - network_analytics
    depends_on:
      - es
  logstash:
    image: docker.elastic.co/logstash/logstash:7.12.1
    volumes:
      - type: bind
        source: ./docker-compose/logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./docker-compose/logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
    networks:
      - network_analytics
    depends_on:
      - es
      - kafka
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    networks:
      - network_analytics
  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    ports:
      - "19092:19092"
    environment:
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:19092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://_{HOSTNAME_COMMAND}:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - network_analytics
  kafdrop:
    image: obsidiandynamics/kafdrop:3.29.0
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:19092"
      JVM_OPTS: "-Xms128M -Xmx512M -Xss512K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    networks:
      - network_analytics
    depends_on:
      - kafka

volumes:
  es:
    driver: local

networks:
  network_analytics:
    driver: bridge
